---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      immich:
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17
            envFrom: &ef
              - secretRef:
                  name: immich-secret
        containers:
          main:
            image: &img
              repository: ghcr.io/immich-app/immich-server
              tag: v1.131.3
            env:
              <<: &env-common
                TZ: "${TZ}"
                IMMICH_MEDIA_LOCATION: &pvc /data
                IMMICH_MACHINE_LEARNING_URL: http://immich-ml.selfhosted.svc.cluster.local:3003
                IMMICH_LOG_LEVEL: verbose
                IMMICH_IGNORE_MOUNT_CHECK_ERRORS: "true"
                REDIS_HOSTNAME: dragonfly.database.svc.cluster.local
                REDIS_PORT: "6379"
                REDIS_DBINDEX: 3
              IMMICH_TELEMETRY_INCLUDE: all
              IMMICH_WORKERS_INCLUDE: &server-include 'api'
            envFrom: *ef
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: [ "ALL" ]
            resources:
              limits:
                memory: 2.5Gi
              requests:
                cpu: 500m
                memory: 2Gi
      microservices:
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: &uid 568
            runAsGroup: *uid
            fsGroup: *uid
            fsGroupChangePolicy: Always
            supplementalGroups: [44] # GPU
            seccompProfile: { type: "RuntimeDefault" }
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: microservices
        containers:
          main:
            image: *img
            env:
              <<: *env-common
              IMMICH_WORKERS_EXCLUDE: *server-include
            envFrom: *ef
            securityContext: *sc
            resources:
              limits:
                memory: 6Gi
                gpu.intel.com/i915: "1"
              requests:
                cpu: 50m
                memory: 3Gi
                gpu.intel.com/i915: "1"
      ml:
        strategy: RollingUpdate
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: ml
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.131.2
            env:
              <<: *env-common
              MPLCONFIGDIR: /tmp/matplotlib
            securityContext: *sc
            resources:
              limits:
                memory: 1860Mi
              requests:
                cpu: 70m
                memory: 1860Mi
    service:
      immich:
        controller: immich
        ports:
          http:
            port: 2283
          metrics:
            port: 8081
      microservices:
        controller: microservices
        ports:
          http:
            port: 2283
          metrics:
            port: 8081
      ml:
        controller: ml
        ports:
          http:
            port: 3003
    ingress:
      main:
        enabled: true
        className: external
        annotations:
          hajimari.io/icon: "camera"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: immich
                  port: http
        tls:
          - secretName: "tls.{{ .Release.Name }}"
            hosts:
              - *host
    persistence:
      library:
        existingClaim: immich-nfs
        advancedMounts:
          immich:
            main:
              - path: *pvc
          microservices:
            main:
              - path: *pvc
      geocoding-dump:
        type: emptyDir
        advancedMounts:
          immich:
            main:
              - path: /usr/src/app/.reverse-geocoding-dump
          microservices:
            main:
              - path: /usr/src/app/.reverse-geocoding-dump
      geoname-dump:
        type: emptyDir
        advancedMounts:
          microservices:
            main:
              - path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
      transformers-cache:
        type: emptyDir
        advancedMounts:
          immich:
            main:
              - path: /usr/src/app/.transformers_cache
          microservices:
            main:
              - path: /usr/src/app/.transformers_cache
      model-cache:
        type: emptyDir
        advancedMounts:
          ml:
            main:
              - path: /cache
      tmp:
        type: emptyDir
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: Always
        seccompProfile: { type: "RuntimeDefault" }
    serviceMonitor:
      immich:
        serviceName: immich
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s
      microservices:
        serviceName: microservices
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 30s