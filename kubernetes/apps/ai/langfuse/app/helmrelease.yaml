---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app langfuse
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      langfuse:
        annotations:
          reloader.stakater.com/auto: "true"
        replicas: 1
        strategy: RollingUpdate
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: "17"
            envFrom: &envFrom
              - secretRef:
                  name: langfuse-secret
              - configMapRef:
                  name: langfuse-ceph-bucket
              - secretRef:
                  name: langfuse-ceph-bucket
        containers:
          web:
            image:
              repository: docker.io/langfuse/langfuse
              tag: "3"
            env:
              # Basic Configuration
              PORT: "3000"
              HOSTNAME: "0.0.0.0"
              NODE_ENV: "production"
              LANGFUSE_LOG_LEVEL: "info"
              NEXTAUTH_URL: "https://langfuse.${SECRET_DOMAIN}"

              # Feature flags
              LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "false"
              AUTH_DISABLE_USERNAME_PASSWORD: "false"

              # Telemetry opt-out
              TELEMETRY_ENABLED: "false"
              NEXT_PUBLIC_TELEMETRY_ENABLED: "false"

              # Worker configuration (web container)
              LANGFUSE_WORKER_HOST: "localhost"
              LANGFUSE_WORKER_PORT: "3030"

              # Database connections (non-sensitive parts)
              CLICKHOUSE_URL: "http://clickhouse-langfuse.database.svc.cluster.local:8123"
              CLICKHOUSE_USER: "langfuse"
              CLICKHOUSE_CLUSTER_ENABLED: "false"
              REDIS_CONNECTION_STRING: "redis://dragonfly.database.svc.cluster.local:6379/6"

              # S3 configuration (non-sensitive parts)
              LANGFUSE_S3_EVENT_UPLOAD_REGION: "us-east-1"
              LANGFUSE_S3_EVENT_UPLOAD_BUCKET:
                valueFrom:
                  configMapKeyRef:
                    name: langfuse-ceph-bucket
                    key: BUCKET_NAME
              LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: "http://rook-ceph-rgw-ceph-objectstore.rook-ceph.svc:80"
              LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
              LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:
                valueFrom:
                  secretKeyRef:
                    name: langfuse-ceph-bucket
                    key: AWS_ACCESS_KEY_ID
              LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY:
                valueFrom:
                  secretKeyRef:
                    name: langfuse-ceph-bucket
                    key: AWS_SECRET_ACCESS_KEY
            envFrom: *envFrom
            probes:
              liveness:
                enabled: true
                spec:
                  httpGet:
                    path: /api/health
                    port: &port 3000
                  initialDelaySeconds: 30
                  periodSeconds: 10
              readiness:
                enabled: true
                spec:
                  httpGet:
                    path: /api/health
                    port: *port
                  initialDelaySeconds: 10
                  periodSeconds: 5
              startup:
                enabled: true
                spec:
                  httpGet:
                    path: /api/health
                    port: *port
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  failureThreshold: 30
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 3Gi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop: ["ALL"]

          worker:
            image:
              repository: docker.io/langfuse/langfuse-worker
              tag: "3"
            env:
              # Worker specific configuration
              PORT: "3030"
              HOSTNAME: "0.0.0.0"
              NODE_ENV: "production"
              LANGFUSE_LOG_LEVEL: "info"
              LANGFUSE_WORKER: "true"

              # Batch processing configuration
              LANGFUSE_WORKER_BATCH_SIZE: "100"
              LANGFUSE_WORKER_CONCURRENCY: "10"

              # Database connections (non-sensitive parts)
              CLICKHOUSE_URL: "http://clickhouse-langfuse.database.svc.cluster.local:8123"
              CLICKHOUSE_USER: "langfuse"
              CLICKHOUSE_CLUSTER_ENABLED: "false"
              REDIS_CONNECTION_STRING: "redis://dragonfly.database.svc.cluster.local:6379/6"

              # S3 configuration (non-sensitive parts)
              LANGFUSE_S3_EVENT_UPLOAD_REGION: "us-east-1"
              LANGFUSE_S3_EVENT_UPLOAD_BUCKET:
                valueFrom:
                  configMapKeyRef:
                    name: langfuse-ceph-bucket
                    key: BUCKET_NAME
              LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: "http://rook-ceph-rgw-ceph-objectstore.rook-ceph.svc:80"
              LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
              LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:
                valueFrom:
                  secretKeyRef:
                    name: langfuse-ceph-bucket
                    key: AWS_ACCESS_KEY_ID
              LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY:
                valueFrom:
                  secretKeyRef:
                    name: langfuse-ceph-bucket
                    key: AWS_SECRET_ACCESS_KEY
            envFrom: *envFrom
            probes:
              liveness:
                enabled: true
                spec:
                  httpGet:
                    path: /api/health
                    port: &workerPort 3030
                  initialDelaySeconds: 30
                  periodSeconds: 10
              readiness:
                enabled: true
                spec:
                  httpGet:
                    path: /api/health
                    port: *workerPort
                  initialDelaySeconds: 10
                  periodSeconds: 5
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                memory: 2Gi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop: ["ALL"]

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch

    service:
      langfuse:
        controller: langfuse
        ports:
          http:
            port: 3000
            targetPort: 3000
          worker:
            port: 3030
            targetPort: 3030

    ingress:
      main:
        enabled: true
        className: internal
        hosts:
          - host: &host "langfuse.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: langfuse
                  port: http
        tls:
          - hosts:
              - *host

    persistence:
      data:
        existingClaim: langfuse
        advancedMounts:
          langfuse:
            web:
              - path: /app/data
            worker:
              - path: /app/data
      tmp:
        type: emptyDir
        advancedMounts:
          langfuse:
            web:
              - path: /tmp
            worker:
              - path: /tmp
