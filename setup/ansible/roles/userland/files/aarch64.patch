diff --git a/interface/khronos/CMakeLists.txt b/interface/khronos/CMakeLists.txt
index 9ad615b..2e5f86f 100644
--- a/interface/khronos/CMakeLists.txt
+++ b/interface/khronos/CMakeLists.txt
@@ -52,7 +52,7 @@ set(CLIENT_SOURCE
    common/khrn_client_pointermap.c
    common/khrn_client_vector.c
    common/khrn_int_hash.c
-   common/khrn_int_hash_asm.s
+#   common/khrn_int_hash_asm.s
    common/khrn_client_cache.c)

 add_library(EGL ${SHARED} ${EGL_SOURCE})
diff --git a/interface/khronos/common/khrn_int_hash.c b/interface/khronos/common/khrn_int_hash.c
index cdaa4f1..e388f1d 100644
--- a/interface/khronos/common/khrn_int_hash.c
+++ b/interface/khronos/common/khrn_int_hash.c
@@ -66,7 +66,7 @@ on 1 byte), but shoehorning those bytes into integers efficiently is messy.
 # define HASH_LITTLE_ENDIAN 1
 # define HASH_BIG_ENDIAN 0

-#ifndef __arm__  // Use the version in khrn_int_hash_asm.s instead
+// #ifndef __arm__  // Use the version in khrn_int_hash_asm.s instead
 /*
 --------------------------------------------------------------------
  This works on all machines.  To be useful, it requires
@@ -113,7 +113,7 @@ uint32_t        initval)         /* the previous hash, or an arbitrary value */
   return c;
 }

-#endif
+// #endif

 /*
 -------------------------------------------------------------------------------
diff --git a/interface/vmcs_host/CMakeLists.txt b/interface/vmcs_host/CMakeLists.txt
index e34e0ae..ab2e0fa 100755
--- a/interface/vmcs_host/CMakeLists.txt
+++ b/interface/vmcs_host/CMakeLists.txt
@@ -24,7 +24,7 @@ if(NOT ARM64)

 	# ILCS pulls in EGL for the ILCS/EGL surface API support
 	target_link_libraries(vcilcs brcmEGL brcmGLESv2 khrn_client vchiq_arm vcos)
-	set(INSTALL_TARGETS "${INSTALL_TARGETS} vcilcs")
+	set(INSTALL_TARGETS ${INSTALL_TARGETS} vcilcs)
 endif()

 # vchostif needs ilcore as well (vmcs_main pulls it in)
diff --git a/opensrc/helpers/libfdt/libfdt_env.h b/opensrc/helpers/libfdt/libfdt_env.h
index 1c966b8..757986c 100644
--- a/opensrc/helpers/libfdt/libfdt_env.h
+++ b/opensrc/helpers/libfdt/libfdt_env.h
@@ -58,15 +58,15 @@

 #ifdef __CHECKER__
 #define __force __attribute__((force))
-#define __bitwise __attribute__((bitwise))
+#define __fdt_bitwise __attribute__((bitwise))
 #else
 #define __force
-#define __bitwise
+#define __fdt_bitwise
 #endif

-typedef uint16_t __bitwise fdt16_t;
-typedef uint32_t __bitwise fdt32_t;
-typedef uint64_t __bitwise fdt64_t;
+typedef uint16_t __fdt_bitwise fdt16_t;
+typedef uint32_t __fdt_bitwise fdt32_t;
+typedef uint64_t __fdt_bitwise fdt64_t;

 //#define EXTRACT_BYTE(x, n)	((unsigned long long)((uint8_t *)&x)[n])
 // xxx work around a compiler bug...

