---

# # Enable this if you run into issues updating
# - name: Reset dpkg
#   command: dpkg --configure -a

- name: Upgrade system
  apt:
    upgrade: dist
    # Need the force_apt_get until
    # https://github.com/ansible/ansible/issues/56832
    force_apt_get: true
  register: apt_upgrade
  retries: 5
  until: apt_upgrade is success

- name: Upgrade all packages to the latest version
  apt:
    name: "*"
    state: latest
    # Need the force_apt_get until
    # https://github.com/ansible/ansible/issues/56832
    force_apt_get: true
  register: apt_update
  retries: 5
  until: apt_update is success

- name: Install Common Packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - dnsutils
      - git
      - gnupg2
      - hdparm
      - htop
      - iputils-ping
      - libnss-mdns
      - neofetch
      - net-tools
      - nfs-common
      - nmap
      - psmisc
      - python3
      - python3-pip
      - rsync
      - software-properties-common
      - traceroute
      - unattended-upgrades
      - wget
    install_recommends: false
    update_cache: true
    # Need the force_apt_get until
    # https://github.com/ansible/ansible/issues/56832
    force_apt_get: true
  register: apt_install_common
  retries: 5
  until: apt_install_common is success

- name: Clean up apt
  apt:
    autoremove: true
    # Need the force_apt_get until
    # https://github.com/ansible/ansible/issues/56832
    force_apt_get: true

- name: Copy unattended-upgrades configuration files in place
  copy:
    src: "{{ item }}"
    dest: "/etc/apt/apt.conf.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - 10periodic
    - 50unattended-upgrades

# See: https://github.com/kubernetes/kubernetes/issues/71305
- name: Use iptables-legacy instead of nftables.
  alternatives:
    name: iptables
    path: /usr/sbin/iptables-legacy

- name: Restart systemd-timesyncd service
  systemd:
    name: systemd-timesyncd
    enabled: true
    state: restarted

- name: Enable systemd-timesyncd service and assure it is started
  systemd:
    name: systemd-timesyncd
    enabled: true
    state: started

# Allowed to fail inorder to be idempotent
- name: Stop log2ram service
  systemd:
    name: log2ram
    state: stopped
  ignore_errors: true

- name: Cloning log2ram from GitHub
  git:
    repo: https://github.com/azlux/log2ram.git
    dest: /opt/log2ram
    version: "{{ log2ram_version }}"

- name: Changing perms of "/opt/log2ram/install.sh"
  file:
    dest: /opt/log2ram/install.sh
    mode: a+x

- name: Install log2ram
  command: /bin/sh ./install.sh
  args:
    chdir: "/opt/log2ram"
  register: log2ram
  changed_when: '"Reboot to activate log2ram" in log2ram.stdout'

- name: Copy log2ram.conf
  template:
    src: log2ram.conf.j2
    dest: /etc/log2ram.conf

- name: Create a firmware folder if it does not exist
  file:
    path: /boot/firmware
    state: directory
    mode: '0755'

- name: Create the config files if they do not exist
  file:
    path: "{{ item }}"
    state: touch
  with_items:
    - /boot/firmware/nobtcmd.txt
    - /boot/firmware/syscfg.txt

- name: Enable required cgroup features and disable IPv6
  lineinfile:
    path: /boot/firmware/nobtcmd.txt
    backrefs: true
    regexp: '^(.*fixrtc)$'
    line: '\1 ipv6.disable=1 cgroup_memory=1 cgroup_enable=memory'
    state: present
  when: deploy_target != 'vagrant'

- name: Disable WiFi
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE DISABLE WIFI"
    block: |
      dtoverlay=pi3-disable-wifi
  when: deploy_target != 'vagrant'

- name: Disable Bluetooth
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE DISABLE BLUETOOTH"
    block: |
      dtoverlay=pi3-disable-bt
  when: deploy_target != 'vagrant'

- name: Disable HDMI
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE DISABLE HDMI"
    block: |
      hdmi_blanking=2
  when: deploy_target != 'vagrant'

- name: Disable Audio
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE DISABLE AUDIO"
    block: |
      dtparam=audio=off
  when: deploy_target != 'vagrant'

- name: Disable Uart
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE DISABLE UART"
    block: |
      enable_uart=0
  when: deploy_target != 'vagrant'

- name: Trottle GPU
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE THROTTLE GPU"
    block: |
      gpu_mem=16
  when: deploy_target != 'vagrant'

- name: Overclock CPU
  blockinfile:
    path: /boot/firmware/syscfg.txt
    marker: "# {mark} ANSIBLE OVERCLOCK CPU"
    block: |
      over_voltage=2
      arm_freq=1750
  when: deploy_target != 'vagrant'
