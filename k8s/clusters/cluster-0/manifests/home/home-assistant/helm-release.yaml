---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app home-assistant
  namespace: home
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
      annotations:
        reloader.stakater.com/auto: "true"
    initContainers:
      init-db:
        image: ghcr.io/onedr0p/postgres-init:16.2@sha256:b7cf97d79ad2af36141fab0c34909c30898ffe5fdcb93d4ac17b03955a3b189d
        imagePullPolicy: IfNotPresent
        envFrom: &envFrom
          - secretRef:
              name: *app
    image:
      repository: ghcr.io/onedr0p/home-assistant
      tag: 2024.2.5@sha256:022fe8c9bd284b19cbabc172ebf901d27f4c15cfa24a35a6becd5e7d4d817885
    env:
      TZ: "${TZ}"
      PYTHONUSERBASE: /config/deps
    envFrom: *envFrom
    service:
      main:
        ports:
          http:
            port: 8123
    persistence:
      config:
        enabled: true
        existingClaim: home-assistant-config
    ingress:
      main:
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "home-assistant"
          nginx.ingress.kubernetes.io/auth-url: |-
            http://ak-outpost-external.security.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |-
            proxy_set_header X-Forwarded-Host $http_host;
          nginx.ingress.kubernetes.io/auth-signin: https://hass.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$escaped_request_uri
        enabled: true
        ingressClassName: external
        hosts:
          - host: &host "hass.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: "tls.{{ .Release.Name }}"
            hosts:
              - *host
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false
      startup:
        enabled: false
    podSecurityContext:
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: "OnRootMismatch"
      supplementalGroups:
        - 100
    addons:
      codeserver:
        enabled: true
        image:
          repository: codercom/code-server
          tag: 4.21.2
        workingDir: "/config"
        args:
          - --user-data-dir
          - "/config/.vscode"
          - --auth
          - "none"
        ingress:
          enabled: true
          ingressClassName: internal
          annotations:
            kubernetes.io/tls-acme: "true"
            cert-manager.io/cluster-issuer: letsencrypt-prod
            auth.home.arpa/enabled: "true"
            nginx.ingress.kubernetes.io/auth-signin: https://hass-vscode.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$escaped_request_uri
          hosts:
            - host: hass-vscode.${SECRET_DOMAIN}
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: tls.hass-vscode
              hosts:
                - hass-vscode.${SECRET_DOMAIN}
        resources:
          requests:
            cpu: 10m
            memory: 284Mi
          limits:
            memory: 284Mi
        volumeMounts:
          - name: config
            mountPath: /config
    resources:
      requests:
        cpu: 45m
        memory: 545Mi
      limits:
        memory: 545Mi
