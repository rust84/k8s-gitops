---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 34.8.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    server:
      resources:
        requests:
          memory: 1000Mi
          cpu: 25m
        limits:
          memory: 2000Mi
    prometheusConfigReloader:
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 200m
          memory: 50Mi
    prometheusOperator:
      tls:
        enabled: false
      admissionWebhooks:
        enabled: false
    alertmanager:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts: ["prom-alert.${SECRET_DOMAIN}"]
        tls:
          - hosts:
              - prom-alert.${SECRET_DOMAIN}
      config:
        global:
          slack_api_url: "${DISCORD_WEBHOOK_URL}"
        receivers:
          - name: "null"
          - name: "slack-monitoring"
            slack_configs:
              - channel: "#alerts"
                send_resolved: true
                title: '{{ template "slack.title" . }}'
                icon_emoji: ":prometheus:"
                color: '{{ template "slack.color" . }}'
                text: '{{ template "slack.text" . }}'
                actions:
                  - type: button
                    text: "Runbook :green_book:"
                    url: "{{ (index .Alerts 0).Annotations.runbook_url }}"
                  - type: button
                    text: "Query :mag:"
                    url: "{{ (index .Alerts 0).GeneratorURL }}"
                  - type: button
                    text: "Silence :no_bell:"
                    url: '{{ template "__alert_silence_link" . }}'
          - name: "pagerduty"
            pagerduty_configs:
              - routing_key: ${SECRET_PAGERDUTY_TOKEN}
                description: |-
                  {{ template "pagerduty.custom.description" . }}
        templates: ["*.tmpl"]
        route:
          group_by: ["job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 12h
          receiver: "null"
          routes:
            - match:
                alertname: Watchdog
              receiver: "null"
            - receiver: "pagerduty"
              match:
                severity: critical
              continue: true
            - receiver: "slack-monitoring"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: rook-ceph-block
              resources:
                requests:
                  storage: 10Gi
        tolerations:
          - key: "arm"
            operator: "Exists"
      templateFiles:
        pagerduty-custom.tmpl: |-
          {{- define "pagerduty.custom.description" -}}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}{{- end -}}
    grafana:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.20.0.120
        - 10.20.0.115
        - 10.20.0.121
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.20.0.120
        - 10.20.0.115
        - 10.20.0.121
    kubeProxy:
      enabled: true
      endpoints:
        - 10.20.0.120
        - 10.20.0.115
        - 10.20.0.121
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.20.0.120
        - 10.20.0.115
        - 10.20.0.121
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus-node-exporter:
      tolerations:
        - key: "arm"
          operator: "Exists"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts: ["prom-server.${SECRET_DOMAIN}"]
        tls:
          - hosts:
              - prom-server.${SECRET_DOMAIN}
      prometheusSpec:
        replicas: 2
        replicaExternalLabelName: "replica"
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: rook-ceph-block
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.24.0
          version: v0.24.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
      thanosService:
        enabled: true
