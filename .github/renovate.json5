{
  // General RenovateBot configuration
  "extends": [
    ":enableRenovate",
    "config:base",
    ":disableRateLimiting",
    ":dependencyDashboard",
    ":semanticCommits",
    ":separatePatchReleases",
    "docker:enableMajor",
    ":enablePreCommit",
    "github>rust84/k8s-gitops//.github/renovate/commitMessage",
    "github>rust84/k8s-gitops//.github/renovate/labels",
    "github>rust84/k8s-gitops//.github/renovate/semanticCommits",
    "github>rust84/k8s-gitops//.github/renovate/allowedVersions",
    "github>rust84/k8s-gitops//.github/renovate/autoMerge",
    "github>rust84/k8s-gitops//.github/renovate/groups"
  ],
  "platform": "github",
  "username": "rust84-bot[bot]",
  "repositories": ["rust84/k8s-gitops"],
  "onboarding": false,
  "requireConfig": false,
  "gitAuthor": "rust84-bot <103048774+rust84-bot[bot]@users.noreply.github.com>",
  "timezone": "Europe/London",
  "dependencyDashboardTitle": "Renovate Dashboard",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  // Set up Renovate Managers
  "helmv3": {
    "fileMatch": ["k8s/charts/.+/Chart\\.yaml$"]
  },
  "helm-values": {
    "fileMatch": [
      "k8s/clusters/.+/helm-release\\.yaml$",
      "k8s/global/.+/helm-release\\.yaml$"
    ]
  },
  "kubernetes": {
    "fileMatch": ["k8s/clusters/.+\\.yaml$", "k8s/global/.+\\.yaml$"]
  },
  "flux": {
    "fileMatch": ["k8s/clusters/.+\\.yaml$", "k8s/global/.+\\.yaml$"]
  },
  "regexManagers": [
    {
      "description": "Regex manager to read and process GitHub release artifacts",
      "fileMatch": ["k8s/clusters/.+\\.yaml$", "k8s/global/.+\\.yaml$"],
      "matchStrings": [
        "https://github.com/(?<org>.*=?)/(?<repo>.*=?)/releases/download/(?<currentValue>.*=?)/.*"
      ],
      "datasourceTemplate": "github-releases",
      "depNameTemplate": "{{org}}/{{repo}}"
    },
    {
      "description": "Generic Regex manager",
      "fileMatch": ["k8s/clusters/.+\\.yaml$", "k8s/global/.+\\.yaml$"],
      "matchStrings": [
        "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( registryUrl=(?<registryUrl>.*?))?( versioning=(?<versioning>.*=?))?\n .*: (?<currentValue>.*=?)"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}",
      "registryUrlTemplate": "{{#if registryUrl}}{{{registryUrl}}}{{else}}{{/if}}"
    },
    {
      "description": "Generic Docker image Regex manager",
      "fileMatch": ["k8s/clusters/.+\\.yaml$", "k8s/global/.+\\.yaml$"],
      "matchStrings": [
        "# renovate: docker-image( registryUrl=(?<registryUrl>.*?))?( versioning=(?<versioning>.*=?))?\n .*: (?<depName>.*?):(?<currentValue>.*=?)"
      ],
      "datasourceTemplate": "docker",
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}docker{{/if}}",
      "registryUrlTemplate": "{{#if registryUrl}}{{{registryUrl}}}{{else}}{{/if}}"
    },
    {
      "description": "Process GitRepository CRD dependencies - Chart and Github Release are the same version",
      "fileMatch": ["k8s/clusters/.+\\.ya?ml$"],
      "matchStrings": [
        "registryUrl=(?<registryUrl>\\S+) chart=(?<depName>\\S+)\n.*?(?<currentValue>[^-\\s]*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    {
      "description": "Process Kustomization CRD dependencies - Image and Github Release are the same version",
      "fileMatch": ["k8s/clusters/.+\\.ya?ml$"],
      "matchStrings": [
        "datasource=(?<datasource>\\S+) image=(?<depName>\\S+)\n.*?-\\s(.*?)\/(?<currentValue>[^/]+)\/[^/]+\n"
      ],
      "datasourceTemplate": "docker"
    }
  ],
  "packageRules": [
    // Setup datasources
    {
      "matchDatasources": ["helm"],
      "ignoreDeprecated": true
    },
    {
      "matchDatasources": ["docker"],
      "commitMessageExtra": "to {{newVersion}}"
    },
    // Custom version schemes
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["blakeblackshear/frigate"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$"
    },
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": [
        "ghcr.io/linuxserver/calibre",
        "ghcr.io/linuxserver/calibre-web"
      ],
      "versioning": "regex:^version-v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$"
    },
    // Version strategies
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["ghcr.io/k8s-at-home/plex"],
      "versioning": "loose"
    }
  ]
}
